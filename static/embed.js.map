{"version":3,"file":"embed.js","sources":["../src/lib/embed.ts"],"sourcesContent":["/**\r\n * Dental Chatbot Widget - Embeddable Script\r\n *\r\n * This script creates and injects the chatbot widget directly into the page\r\n * without using iframes. It handles all the widget functionality including\r\n * chat history, API communication, and UI interactions.\r\n */\r\n\r\n// Define the global window interface\r\ndeclare global {\r\n\tinterface Window {\r\n\t\tChatbotWidget?: ChatbotWidgetAPI;\r\n\t}\r\n}\r\n\r\n// API for controlling the widget\r\ninterface ChatbotWidgetAPI {\r\n\topen: () => void;\r\n\tclose: () => void;\r\n\ttoggle: () => void;\r\n\tisOpen: () => boolean;\r\n}\r\n\r\n// Message interface\r\ninterface ChatMessage {\r\n\tid: string;\r\n\tsender: 'user' | 'bot';\r\n\ttext: string;\r\n\ttimestamp: Date | string;\r\n}\r\n\r\n// Self-executing function to avoid global scope pollution\r\n(() => {\r\n\t// Constants\r\n\tconst WIDGET_ID = 'dental-chatbot-widget';\r\n\tconst API_URL = 'https://02ef-158-62-6-36.ngrok-free.app'; // Replace with your API URL in production\r\n\r\n\t// CSS styles for the widget (Tailwind-inspired but manually written)\r\n\tconst CSS = `\r\n    #dental-chatbot-widget {\r\n      position: fixed;\r\n      bottom: 16px;\r\n      right: 16px;\r\n      width: 320px;\r\n      max-width: 100%;\r\n      border-radius: 8px 8px 0 0;\r\n      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n      display: flex;\r\n      flex-direction: column;\r\n      overflow: hidden;\r\n      z-index: 2147483647;\r\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\r\n      font-size: 14px;\r\n      line-height: 1.5;\r\n      transition: all 0.3s ease;\r\n      background-color: white;\r\n      height: 450px;\r\n    }\r\n\r\n    #dental-chatbot-widget.minimized {\r\n      height: 48px !important;\r\n    }\r\n\r\n    .chatbot-header {\r\n      background-color: #4F46E5;\r\n      color: white;\r\n      padding: 12px 16px;\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      cursor: pointer;\r\n      font-weight: bold;\r\n    }\r\n\r\n    .chatbot-toggle-button {\r\n      background: none;\r\n      border: none;\r\n      color: white;\r\n      cursor: pointer;\r\n      padding: 0;\r\n    }\r\n\r\n    .chatbot-body {\r\n      flex: 1;\r\n      display: flex;\r\n      flex-direction: column;\r\n      overflow: hidden;\r\n      height: calc(100% - 48px);\r\n    }\r\n\r\n    #dental-chatbot-widget.minimized .chatbot-body {\r\n      display: none;\r\n    }\r\n\r\n    .chatbot-messages {\r\n      flex: 1;\r\n      overflow-y: auto;\r\n      padding: 12px;\r\n      display: flex;\r\n      flex-direction: column;\r\n      gap: 12px;\r\n      background-color: #f9fafb;\r\n    }\r\n\r\n    .chatbot-message {\r\n      max-width: 80%;\r\n      padding: 10px;\r\n      border-radius: 8px;\r\n      margin-bottom: 8px;\r\n      word-break: break-word;\r\n    }\r\n\r\n    .chatbot-message-user {\r\n      align-self: flex-end;\r\n      background-color: #4F46E5;\r\n      color: white;\r\n    }\r\n\r\n    .chatbot-message-bot {\r\n      align-self: flex-start;\r\n      background-color: #f0f0f0;\r\n      color: #333;\r\n    }\r\n\r\n    .chatbot-message-time {\r\n      font-size: 10px;\r\n      opacity: 0.7;\r\n      margin-top: 4px;\r\n      text-align: right;\r\n    }\r\n\r\n    .chatbot-input-area {\r\n      display: flex;\r\n      padding: 8px;\r\n      border-top: 1px solid #e5e7eb;\r\n      background-color: white;\r\n    }\r\n\r\n    .chatbot-input {\r\n      flex: 1;\r\n      padding: 8px 12px;\r\n      border: 1px solid #e5e7eb;\r\n      border-radius: 4px;\r\n      outline: none;\r\n    }\r\n\r\n    .chatbot-input:focus {\r\n      border-color: #4F46E5;\r\n      box-shadow: 0 0 0 2px rgba(79, 70, 229, 0.2);\r\n    }\r\n\r\n    .chatbot-send-button {\r\n      margin-left: 8px;\r\n      padding: 8px 16px;\r\n      background-color: #4F46E5;\r\n      color: white;\r\n      border: none;\r\n      border-radius: 4px;\r\n      cursor: pointer;\r\n      font-weight: 500;\r\n    }\r\n\r\n    .chatbot-send-button:hover {\r\n      background-color: #4338CA;\r\n    }\r\n\r\n    .chatbot-send-button:disabled {\r\n      opacity: 0.5;\r\n      cursor: not-allowed;\r\n    }\r\n\r\n    .chatbot-loading {\r\n      display: flex;\r\n      gap: 4px;\r\n      padding: 8px;\r\n      align-self: flex-start;\r\n      background-color: #f0f0f0;\r\n      border-radius: 8px;\r\n    }\r\n\r\n    .chatbot-loading-dot {\r\n      width: 8px;\r\n      height: 8px;\r\n      background-color: #888;\r\n      border-radius: 50%;\r\n      opacity: 0.7;\r\n    }\r\n\r\n    .chatbot-loading-dot:nth-child(1) {\r\n      animation: pulse 1.2s infinite;\r\n    }\r\n\r\n    .chatbot-loading-dot:nth-child(2) {\r\n      animation: pulse 1.2s infinite 0.4s;\r\n    }\r\n\r\n    .chatbot-loading-dot:nth-child(3) {\r\n      animation: pulse 1.2s infinite 0.8s;\r\n    }\r\n\r\n    @keyframes pulse {\r\n      0% {\r\n        transform: scale(0.5);\r\n        opacity: 0.5;\r\n      }\r\n      50% {\r\n        transform: scale(1);\r\n        opacity: 1;\r\n      }\r\n      100% {\r\n        transform: scale(0.5);\r\n        opacity: 0.5;\r\n      }\r\n    }\r\n  `;\r\n\r\n\t// HTML template for the widget\r\n\tconst HTML = `\r\n    <div class=\"chatbot-header\">\r\n      <span>Dental Support</span>\r\n      <button class=\"chatbot-toggle-button\" aria-label=\"Toggle chat widget\">\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n          <polyline points=\"18 15 12 9 6 15\"></polyline>\r\n        </svg>\r\n      </button>\r\n    </div>\r\n    <div class=\"chatbot-body\">\r\n      <div class=\"chatbot-messages\" aria-live=\"polite\"></div>\r\n      <div class=\"chatbot-input-area\">\r\n        <input type=\"text\" class=\"chatbot-input\" placeholder=\"Type your message...\" aria-label=\"Type your message\">\r\n        <button class=\"chatbot-send-button\">Send</button>\r\n      </div>\r\n    </div>\r\n  `;\r\n\r\n\t// Create and inject the widget styles\r\n\tconst injectStyles = (): void => {\r\n\t\t// Check if styles already exist\r\n\t\tif (document.getElementById('dental-chatbot-styles')) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst styleElement = document.createElement('style');\r\n\t\tstyleElement.id = 'dental-chatbot-styles';\r\n\t\tstyleElement.textContent = CSS;\r\n\t\tdocument.head.appendChild(styleElement);\r\n\t};\r\n\r\n\t// Create and inject the widget\r\n\tconst createWidget = (): HTMLElement | null => {\r\n\t\t// Check if widget already exists\r\n\t\tconst existingWidget = document.getElementById(WIDGET_ID);\r\n\t\tif (existingWidget) {\r\n\t\t\tconsole.warn('Dental Chatbot Widget is already initialized');\r\n\t\t\treturn existingWidget;\r\n\t\t}\r\n\r\n\t\t// Create container\r\n\t\tconst container = document.createElement('div');\r\n\t\tcontainer.id = WIDGET_ID;\r\n\t\tcontainer.innerHTML = HTML;\r\n\t\tcontainer.setAttribute('aria-label', 'Dental Support Chat Widget');\r\n\r\n\t\t// Add to page\r\n\t\tdocument.body.appendChild(container);\r\n\r\n\t\treturn container;\r\n\t};\r\n\r\n\t// Initialize the widget functionality\r\n\tconst initializeWidget = (container: HTMLElement): ChatbotWidgetAPI => {\r\n\t\t// Get elements\r\n\t\tconst headerElement = container.querySelector('.chatbot-header') as HTMLElement;\r\n\t\tconst toggleButton = container.querySelector('.chatbot-toggle-button') as HTMLButtonElement;\r\n\t\tconst messagesContainer = container.querySelector('.chatbot-messages') as HTMLElement;\r\n\t\tconst inputElement = container.querySelector('.chatbot-input') as HTMLInputElement;\r\n\t\tconst sendButton = container.querySelector('.chatbot-send-button') as HTMLButtonElement;\r\n\r\n\t\t// State\r\n\t\tlet isMinimized = localStorage.getItem('chatbot-minimized') === 'true';\r\n\t\tconst userId = localStorage.getItem('chatbot-user-id') || crypto.randomUUID();\r\n\t\tlet messages: ChatMessage[] = [];\r\n\t\tlet isLoading = false;\r\n\r\n\t\t// Save user ID\r\n\t\tlocalStorage.setItem('chatbot-user-id', userId);\r\n\r\n\t\t// Update button icon based on state\r\n\t\tconst updateToggleIcon = (): void => {\r\n\t\t\ttoggleButton.innerHTML = isMinimized\r\n\t\t\t\t? '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polyline points=\"6 9 12 15 18 9\"></polyline></svg>'\r\n\t\t\t\t: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polyline points=\"18 15 12 9 6 15\"></polyline></svg>';\r\n\t\t};\r\n\r\n\t\t// Toggle minimize function\r\n\t\tconst toggleMinimize = (): void => {\r\n\t\t\tisMinimized = !isMinimized;\r\n\t\t\tcontainer.classList.toggle('minimized', isMinimized);\r\n\t\t\tlocalStorage.setItem('chatbot-minimized', isMinimized.toString());\r\n\t\t\tupdateToggleIcon();\r\n\t\t};\r\n\r\n\t\t// Add message to UI\r\n\t\tconst addMessageToUI = (message: ChatMessage): void => {\r\n\t\t\tconst messageElement = document.createElement('div');\r\n\t\t\tmessageElement.classList.add('chatbot-message', `chatbot-message-${message.sender}`);\r\n\r\n\t\t\tconst time =\r\n\t\t\t\tmessage.timestamp instanceof Date ? message.timestamp : new Date(message.timestamp);\r\n\r\n\t\t\tmessageElement.innerHTML = `\r\n        <div class=\"chatbot-message-content\">${message.text}</div>\r\n        <div class=\"chatbot-message-time\">${time.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</div>\r\n      `;\r\n\r\n\t\t\tmessagesContainer.appendChild(messageElement);\r\n\t\t\tmessagesContainer.scrollTop = messagesContainer.scrollHeight;\r\n\t\t};\r\n\r\n\t\t// Save messages to localStorage\r\n\t\tconst saveMessages = (): void => {\r\n\t\t\tlocalStorage.setItem('chatbot-messages', JSON.stringify(messages));\r\n\t\t};\r\n\r\n\t\t// Show loading indicator\r\n\t\tconst showLoading = (): HTMLElement => {\r\n\t\t\tconst loadingElement = document.createElement('div');\r\n\t\t\tloadingElement.classList.add('chatbot-message', 'chatbot-message-bot', 'chatbot-loading');\r\n\t\t\tloadingElement.innerHTML = `\r\n        <div class=\"chatbot-loading-dot\"></div>\r\n        <div class=\"chatbot-loading-dot\"></div>\r\n        <div class=\"chatbot-loading-dot\"></div>\r\n      `;\r\n\t\t\tmessagesContainer.appendChild(loadingElement);\r\n\t\t\tmessagesContainer.scrollTop = messagesContainer.scrollHeight;\r\n\t\t\treturn loadingElement;\r\n\t\t};\r\n\r\n\t\t// Remove loading indicator\r\n\t\tconst removeLoading = (element: HTMLElement): void => {\r\n\t\t\tif (element && element.parentNode) {\r\n\t\t\t\telement.parentNode.removeChild(element);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Send message function\r\n\t\tconst sendMessage = async (text: string): Promise<void> => {\r\n\t\t\tif (!text.trim() || isLoading) return;\r\n\r\n\t\t\tconst userMessage: ChatMessage = {\r\n\t\t\t\tid: crypto.randomUUID(),\r\n\t\t\t\tsender: 'user',\r\n\t\t\t\ttext: text.trim(),\r\n\t\t\t\ttimestamp: new Date()\r\n\t\t\t};\r\n\r\n\t\t\t// Add user message\r\n\t\t\taddMessageToUI(userMessage);\r\n\t\t\tmessages.push(userMessage);\r\n\t\t\tsaveMessages();\r\n\r\n\t\t\t// Clear input\r\n\t\t\tinputElement.value = '';\r\n\r\n\t\t\t// Show loading\r\n\t\t\tisLoading = true;\r\n\t\t\tsendButton.disabled = true;\r\n\t\t\tconst loadingElement = showLoading();\r\n\r\n\t\t\ttry {\r\n\t\t\t\t// Send to API\r\n\t\t\t\tconst response = await fetch(`${API_URL}/chat`, {\r\n\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\theaders: { 'Content-Type': 'application/json' },\r\n\t\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\t\tuserId,\r\n\t\t\t\t\t\tmessage: userMessage.text,\r\n\t\t\t\t\t\tdomain: window.location.hostname || 'unknown'\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// Remove loading\r\n\t\t\t\tremoveLoading(loadingElement);\r\n\t\t\t\tisLoading = false;\r\n\t\t\t\tsendButton.disabled = false;\r\n\r\n\t\t\t\tif (!response.ok) {\r\n\t\t\t\t\tthrow new Error(`API responded with status ${response.status}`);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst data = await response.json();\r\n\r\n\t\t\t\tconst botMessage: ChatMessage = {\r\n\t\t\t\t\tid: data.id || crypto.randomUUID(),\r\n\t\t\t\t\tsender: 'bot',\r\n\t\t\t\t\ttext: data.text,\r\n\t\t\t\t\ttimestamp: data.timestamp ? new Date(data.timestamp) : new Date()\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Add bot message\r\n\t\t\t\taddMessageToUI(botMessage);\r\n\t\t\t\tmessages.push(botMessage);\r\n\t\t\t\tsaveMessages();\r\n\t\t\t} catch (error) {\r\n\t\t\t\t// Remove loading\r\n\t\t\t\tremoveLoading(loadingElement);\r\n\t\t\t\tisLoading = false;\r\n\t\t\t\tsendButton.disabled = false;\r\n\r\n\t\t\t\tconsole.error('Error sending message:', error);\r\n\r\n\t\t\t\tconst errorMessage: ChatMessage = {\r\n\t\t\t\t\tid: crypto.randomUUID(),\r\n\t\t\t\t\tsender: 'bot',\r\n\t\t\t\t\ttext: 'Sorry, I encountered an error. Please try again later.',\r\n\t\t\t\t\ttimestamp: new Date()\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Add error message\r\n\t\t\t\taddMessageToUI(errorMessage);\r\n\t\t\t\tmessages.push(errorMessage);\r\n\t\t\t\tsaveMessages();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Handle key press in input\r\n\t\tconst handleInputKeyPress = (event: KeyboardEvent): void => {\r\n\t\t\tif (event.key === 'Enter') {\r\n\t\t\t\tsendMessage(inputElement.value);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Initialize the widget\r\n\t\tconst initialize = async (): Promise<void> => {\r\n\t\t\t// Set initial minimized state\r\n\t\t\tcontainer.classList.toggle('minimized', isMinimized);\r\n\t\t\tupdateToggleIcon();\r\n\r\n\t\t\ttry {\r\n\t\t\t\t// Try to fetch chat history from API\r\n\t\t\t\tconst response = await fetch(`${API_URL}/history/${userId}`);\r\n\r\n\t\t\t\tif (response.ok) {\r\n\t\t\t\t\tconst data = await response.json();\r\n\r\n\t\t\t\t\tif (data.messages && data.messages.length > 0) {\r\n\t\t\t\t\t\t// Use the server-side messages\r\n\t\t\t\t\t\tmessages = data.messages.map((msg: ChatMessage) => ({\r\n\t\t\t\t\t\t\t...msg,\r\n\t\t\t\t\t\t\ttimestamp: new Date(msg.timestamp)\r\n\t\t\t\t\t\t}));\r\n\r\n\t\t\t\t\t\t// Add to UI\r\n\t\t\t\t\t\tmessages.forEach(addMessageToUI);\r\n\t\t\t\t\t\tsaveMessages();\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.warn('Failed to fetch chat history from API:', error);\r\n\t\t\t}\r\n\r\n\t\t\t// If API fails, try to load from localStorage\r\n\t\t\ttry {\r\n\t\t\t\tconst savedMessages = localStorage.getItem('chatbot-messages');\r\n\r\n\t\t\t\tif (savedMessages) {\r\n\t\t\t\t\tconst parsedMessages = JSON.parse(savedMessages);\r\n\r\n\t\t\t\t\tif (Array.isArray(parsedMessages) && parsedMessages.length > 0) {\r\n\t\t\t\t\t\tmessages = parsedMessages.map((msg: ChatMessage) => ({\r\n\t\t\t\t\t\t\t...msg,\r\n\t\t\t\t\t\t\ttimestamp: new Date(msg.timestamp)\r\n\t\t\t\t\t\t}));\r\n\r\n\t\t\t\t\t\t// Add to UI\r\n\t\t\t\t\t\tmessages.forEach(addMessageToUI);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.warn('Failed to load saved messages:', error);\r\n\t\t\t}\r\n\r\n\t\t\t// If no messages found, show greeting\r\n\t\t\ttry {\r\n\t\t\t\tisLoading = true;\r\n\t\t\t\tsendButton.disabled = true;\r\n\t\t\t\tconst loadingElement = showLoading();\r\n\r\n\t\t\t\tconst response = await fetch(`${API_URL}/chat`, {\r\n\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\theaders: { 'Content-Type': 'application/json' },\r\n\t\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\t\tuserId,\r\n\t\t\t\t\t\tmessage: 'hello',\r\n\t\t\t\t\t\tdomain: window.location.hostname || 'unknown'\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\r\n\t\t\t\tremoveLoading(loadingElement);\r\n\t\t\t\tisLoading = false;\r\n\t\t\t\tsendButton.disabled = false;\r\n\r\n\t\t\t\tif (response.ok) {\r\n\t\t\t\t\tconst data = await response.json();\r\n\r\n\t\t\t\t\tconst botMessage: ChatMessage = {\r\n\t\t\t\t\t\tid: data.id || crypto.randomUUID(),\r\n\t\t\t\t\t\tsender: 'bot',\r\n\t\t\t\t\t\ttext: data.text,\r\n\t\t\t\t\t\ttimestamp: data.timestamp ? new Date(data.timestamp) : new Date()\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\taddMessageToUI(botMessage);\r\n\t\t\t\t\tmessages.push(botMessage);\r\n\t\t\t\t\tsaveMessages();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(`API responded with status ${response.status}`);\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error('Error getting initial greeting:', error);\r\n\t\t\t\tisLoading = false;\r\n\t\t\t\tsendButton.disabled = false;\r\n\r\n\t\t\t\tconst greetingMessage: ChatMessage = {\r\n\t\t\t\t\tid: crypto.randomUUID(),\r\n\t\t\t\t\tsender: 'bot',\r\n\t\t\t\t\ttext: `Hello! How can I help you today? You're visiting from ${window.location.hostname || 'an unknown domain'}.`,\r\n\t\t\t\t\ttimestamp: new Date()\r\n\t\t\t\t};\r\n\r\n\t\t\t\taddMessageToUI(greetingMessage);\r\n\t\t\t\tmessages.push(greetingMessage);\r\n\t\t\t\tsaveMessages();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Add event listeners\r\n\t\theaderElement.addEventListener('click', toggleMinimize);\r\n\t\tsendButton.addEventListener('click', () => sendMessage(inputElement.value));\r\n\t\tinputElement.addEventListener('keydown', handleInputKeyPress);\r\n\r\n\t\t// Initialize widget\r\n\t\tinitialize();\r\n\r\n\t\t// Return widget API\r\n\t\treturn {\r\n\t\t\topen: () => {\r\n\t\t\t\tif (isMinimized) {\r\n\t\t\t\t\ttoggleMinimize();\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tclose: () => {\r\n\t\t\t\tif (!isMinimized) {\r\n\t\t\t\t\ttoggleMinimize();\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\ttoggle: toggleMinimize,\r\n\t\t\tisOpen: () => !isMinimized\r\n\t\t};\r\n\t};\r\n\r\n\t// Check if document is ready\r\n\tconst documentReady = (callback: () => void): void => {\r\n\t\tif (document.readyState === 'complete' || document.readyState === 'interactive') {\r\n\t\t\tsetTimeout(callback, 1);\r\n\t\t} else {\r\n\t\t\tdocument.addEventListener('DOMContentLoaded', callback);\r\n\t\t}\r\n\t};\r\n\r\n\t// Initialize the widget when document is ready\r\n\tdocumentReady(() => {\r\n\t\ttry {\r\n\t\t\t// Inject styles\r\n\t\t\tinjectStyles();\r\n\r\n\t\t\t// Create widget\r\n\t\t\tconst container = createWidget();\r\n\r\n\t\t\tif (container) {\r\n\t\t\t\t// Initialize widget functionality\r\n\t\t\t\tconst api = initializeWidget(container);\r\n\r\n\t\t\t\t// Expose API globally\r\n\t\t\t\twindow.ChatbotWidget = api;\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('Error initializing Dental Chatbot Widget:', error);\r\n\t\t}\r\n\t});\r\n})();\r\n\r\n// Export nothing for TypeScript compatibility\r\nexport {};\r\n"],"names":["WIDGET_ID","API_URL","CSS","HTML","injectStyles","styleElement","createWidget","existingWidget","container","initializeWidget","headerElement","toggleButton","messagesContainer","inputElement","sendButton","isMinimized","userId","messages","isLoading","updateToggleIcon","toggleMinimize","addMessageToUI","message","messageElement","time","saveMessages","showLoading","loadingElement","removeLoading","element","sendMessage","text","userMessage","response","data","botMessage","error","errorMessage","handleInputKeyPress","event","initialize","msg","savedMessages","parsedMessages","greetingMessage","callback","api"],"mappings":"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"}