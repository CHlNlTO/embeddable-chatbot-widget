{"version":3,"file":"embed.js","sources":["../src/lib/embed.ts"],"sourcesContent":["/**\r\n * Dentalflo AI Chatbot Widget - Embeddable Script\r\n *\r\n * This script creates an iframe that loads the chatbot widget and\r\n * provides an API for controlling the widget.\r\n */\r\n\r\n// Define the global window interface\r\ndeclare global {\r\n\tinterface Window {\r\n\t\tChatbotWidget?: ChatbotWidgetAPI;\r\n\t}\r\n}\r\n\r\n// Constants\r\nconst WIDGET_ID = 'dentalflo-chatbot-widget-iframe';\r\nconst DEFAULT_WIDTH = '320px';\r\nconst DEFAULT_HEIGHT = '450px';\r\nconst MINIMIZED_HEIGHT = '54px';\r\nconst DEFAULT_CONFIG = {\r\n\tname: 'Dentalflo AI Clinic',\r\n\ttheme: {\r\n\t\ttextColor: '#FFFFFF',\r\n\t\tprimaryColor: '#6247ff',\r\n\t\tsecondaryColor: '#92afff',\r\n\t\tbackgroundColor: '#FFFFFF'\r\n\t},\r\n\timageUrl: ''\r\n};\r\n\r\ninterface ClinicConfig {\r\n\tname: string;\r\n\ttheme: {\r\n\t\ttextColor: string;\r\n\t\tprimaryColor: string;\r\n\t\tsecondaryColor: string;\r\n\t\tbackgroundColor: string;\r\n\t};\r\n\timageUrl: string;\r\n}\r\n\r\ninterface ChatbotWidgetAPI {\r\n\topen: () => void;\r\n\tclose: () => void;\r\n\ttoggle: () => void;\r\n\tisOpen: () => boolean;\r\n}\r\n\r\n/**\r\n * Extract the assistantId from either the query parameter or script attribute\r\n */\r\nfunction getAssistantId(): string | null {\r\n\t// Try to get from script attribute\r\n\tconst scriptElement = getCurrentScriptElement();\r\n\tif (scriptElement && scriptElement.getAttribute('assistantId')) {\r\n\t\treturn scriptElement.getAttribute('assistantId');\r\n\t}\r\n\r\n\t// Try to get from URL query parameter\r\n\tif (scriptElement && scriptElement.src) {\r\n\t\ttry {\r\n\t\t\tconst scriptUrl = new URL(scriptElement.src);\r\n\t\t\treturn scriptUrl.searchParams.get('assistantId');\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('Failed to parse script URL:', error);\r\n\t\t}\r\n\t}\r\n\r\n\treturn null;\r\n}\r\n\r\n/**\r\n * Fetch widget configuration from the API\r\n */\r\nasync function fetchWidgetConfig(assistantId: string): Promise<ClinicConfig> {\r\n\ttry {\r\n\t\t// For widget config, we're using the local API endpoint in routes/api/widget-config\r\n\t\t// since this is not existing yet on the backend, but preferably this should be fetched from the backend\r\n\t\t// TODO: Replace with actual API endpoint\r\n\t\tconst response = await fetch(`/api/widget-config?assistantId=${assistantId}`);\r\n\r\n\t\tif (!response.ok) {\r\n\t\t\tthrow new Error(`Failed to fetch widget config: ${response.status}`);\r\n\t\t}\r\n\r\n\t\treturn await response.json();\r\n\t} catch (error) {\r\n\t\tconsole.error('Error fetching widget configuration:', error);\r\n\t\treturn DEFAULT_CONFIG;\r\n\t}\r\n}\r\n\r\n/**\r\n * Create and initialize the widget iframe\r\n */\r\nasync function initializeChatbotWidget(): Promise<HTMLIFrameElement | null> {\r\n\ttry {\r\n\t\t// Prevent duplicates\r\n\t\tif (document.getElementById(WIDGET_ID)) {\r\n\t\t\tconsole.warn('Dentalflo AI Chatbot Widget is already initialized');\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t// Get current script element\r\n\t\tconst scriptElement = getCurrentScriptElement();\r\n\r\n\t\t// Get assistantId\r\n\t\tconst assistantId = getAssistantId();\r\n\t\tif (!assistantId) {\r\n\t\t\tconsole.warn('No assistantId provided. Widget may not function correctly.');\r\n\t\t}\r\n\r\n\t\t// Fetch widget configuration if assistantId is available\r\n\t\tlet config = DEFAULT_CONFIG;\r\n\t\tif (assistantId) {\r\n\t\t\tconfig = await fetchWidgetConfig(assistantId);\r\n\t\t}\r\n\r\n\t\t// Create widget iframe\r\n\t\tconst iframe = document.createElement('iframe');\r\n\r\n\t\t// Set iframe attributes\r\n\t\tiframe.id = WIDGET_ID;\r\n\t\tiframe.title = config.name || 'Dentalflo AI Clinic';\r\n\t\tiframe.setAttribute('aria-label', config.name || 'Dentalflo AI Clinic Chat Widget');\r\n\r\n\t\t// Set iframe styles\r\n\t\tObject.assign(iframe.style, {\r\n\t\t\tposition: 'fixed',\r\n\t\t\tbottom: '16px',\r\n\t\t\tright: '16px',\r\n\t\t\twidth: DEFAULT_WIDTH,\r\n\t\t\theight: DEFAULT_HEIGHT,\r\n\t\t\tborder: 'none',\r\n\t\t\tzIndex: '2147483647',\r\n\t\t\toverflow: 'hidden',\r\n\t\t\ttransition: 'all 0.3s ease',\r\n\t\t\tboxShadow: '0 0 10px rgba(0, 0, 0, 0.1)',\r\n\t\t\tborderRadius: '8px 8px 0 0'\r\n\t\t});\r\n\r\n\t\t// Set the src with assistantId parameter and config\r\n\t\tconst widgetUrl = new URL('/widget', scriptElement?.src || window.location.href);\r\n\r\n\t\t// Add parameters\r\n\t\twidgetUrl.searchParams.set('t', Date.now().toString());\r\n\r\n\t\t// Add assistantId if available\r\n\t\tif (assistantId) {\r\n\t\t\twidgetUrl.searchParams.set('assistantId', assistantId);\r\n\t\t}\r\n\r\n\t\t// Serialize the config and add as a parameter\r\n\t\twidgetUrl.searchParams.set('config', encodeURIComponent(JSON.stringify(config)));\r\n\r\n\t\tiframe.src = widgetUrl.toString();\r\n\r\n\t\t// Add to body\r\n\t\tdocument.body.appendChild(iframe);\r\n\r\n\t\treturn iframe;\r\n\t} catch (error) {\r\n\t\tconsole.error('Failed to initialize Dentalflo AI Chatbot Widget:', error);\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\n/**\r\n * Get the current script element\r\n */\r\nfunction getCurrentScriptElement(): HTMLScriptElement | null {\r\n\t// Get the current script\r\n\tif (document.currentScript) {\r\n\t\treturn document.currentScript as HTMLScriptElement;\r\n\t}\r\n\r\n\t// Fallback for browsers that don't support currentScript\r\n\tconst scripts = document.getElementsByTagName('script');\r\n\treturn scripts[scripts.length - 1];\r\n}\r\n\r\n/**\r\n * Create and expose the widget API\r\n */\r\nfunction createWidgetAPI(iframe: HTMLIFrameElement | null): ChatbotWidgetAPI {\r\n\tconst api: ChatbotWidgetAPI = {\r\n\t\topen: () => {\r\n\t\t\tif (!iframe) return;\r\n\t\t\tiframe.style.height = DEFAULT_HEIGHT;\r\n\t\t\tiframe.contentWindow?.postMessage('chatbot-open', '*');\r\n\t\t},\r\n\r\n\t\tclose: () => {\r\n\t\t\tif (!iframe) return;\r\n\t\t\tiframe.style.height = MINIMIZED_HEIGHT;\r\n\t\t\tiframe.contentWindow?.postMessage('chatbot-close', '*');\r\n\t\t},\r\n\r\n\t\ttoggle: () => {\r\n\t\t\tif (!iframe) return;\r\n\t\t\tif (api.isOpen()) {\r\n\t\t\t\tapi.close();\r\n\t\t\t} else {\r\n\t\t\t\tapi.open();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tisOpen: () => {\r\n\t\t\tif (!iframe) return false;\r\n\t\t\treturn iframe.style.height !== MINIMIZED_HEIGHT;\r\n\t\t}\r\n\t};\r\n\r\n\treturn api;\r\n}\r\n\r\n// Initialize the widget and create API\r\n(async function () {\r\n\ttry {\r\n\t\t// Create the iframe\r\n\t\tconst iframe = await initializeChatbotWidget();\r\n\r\n\t\t// Create and expose the API\r\n\t\tconst widgetAPI = createWidgetAPI(iframe);\r\n\r\n\t\t// Add the API to the global scope\r\n\t\twindow.ChatbotWidget = widgetAPI;\r\n\r\n\t\t// Listen for messages from the iframe\r\n\t\twindow.addEventListener('message', (event) => {\r\n\t\t\tif (event.data === 'chatbot-widget-loaded') {\r\n\t\t\t\tconsole.log('Dentalflo AI Chatbot Widget loaded successfully');\r\n\t\t\t}\r\n\t\t\t// Listen for minimize/expand messages from the widget\r\n\t\t\telse if (event.data === 'chatbot-minimize' && iframe) {\r\n\t\t\t\tiframe.style.height = MINIMIZED_HEIGHT;\r\n\t\t\t} else if (event.data === 'chatbot-expand' && iframe) {\r\n\t\t\t\tiframe.style.height = DEFAULT_HEIGHT;\r\n\t\t\t}\r\n\t\t});\r\n\t} catch (error) {\r\n\t\tconsole.error('Error initializing Dentalflo AI Chatbot Widget:', error);\r\n\t}\r\n})();\r\n\r\n// Export nothing for TypeScript compatibility\r\nexport {};\r\n"],"names":["WIDGET_ID","DEFAULT_WIDTH","DEFAULT_HEIGHT","MINIMIZED_HEIGHT","DEFAULT_CONFIG","getAssistantId","scriptElement","getCurrentScriptElement","error","fetchWidgetConfig","assistantId","response","initializeChatbotWidget","config","iframe","widgetUrl","scripts","createWidgetAPI","api","_a","widgetAPI","event"],"mappings":"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"}